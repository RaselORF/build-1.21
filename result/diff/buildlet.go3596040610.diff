--- /workspace/source/cmd/buildlet/buildlet.go
+++ /workspace/source/cmd/buildlet/buildlet.go
@@ -1884,6 +1884,24 @@
 		exec.Command("/usr/sbin/chown", "-R", sshUser, sshDir).Run()
 	}
 	if runtime.GOOS == "windows" {
+		// OpenRefactory Warning:
+		// Possible OS Command Injection!
+		// Path:
+		//	File: buildlet.go, Line: 1466
+		//		sshUser := r.Header.Get("X-Go-Ssh-User")
+		//		Variable 'sshUser' is assigned a tainted value from an external source.
+		//	File: buildlet.go, Line: 1469
+		//		appendSSHAuthorizedKey(sshUser, authKey)
+		//		Tainted information is passed through the function call via 'sshUser' to the parameter 'sshUser'
+		//	File: buildlet.go, Line: 1857
+		//		sshDir := filepath.Join(homeRoot, sshUser, ".ssh")
+		//		Variable 'sshDir' is assigned a tainted value which is passed through a function call.
+		//	File: buildlet.go, Line: 1864
+		//		authFile := filepath.Join(sshDir, "authorized_keys")
+		//		Variable 'authFile' is assigned a tainted value which is passed through a function call.
+		//	File: buildlet.go, Line: 1887
+		//		exec.Command("icacls.exe", authFile, "/grant", `NT SERVICE\sshd:(R)`).CombinedOutput()
+		//		Tainted information is passed through a function call and is used in a sink.
 		if res, err := exec.Command("icacls.exe", authFile, "/grant", `NT SERVICE\sshd:(R)`).CombinedOutput(); err != nil {
 			return fmt.Errorf("setting permissions on authorized_keys with: %v\n%s", err, res)
 		}
